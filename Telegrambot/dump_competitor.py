import os
import json
import asyncio
from telethon import TelegramClient
from dotenv import load_dotenv
import re

CANONICAL_LOCATIONS = ["–ê–Ω—Ç–∞–ª–∏—è", "–ë–µ–ª—å–¥–∏–±–∏", "–ì—ë–π–Ω—é–∫", "–ö–µ–º–µ—Ä", "–ú–∞–Ω–∞–≤–≥–∞—Ç", "–°–∏–¥–µ", "–°—Ç–∞–º–±—É–ª", "–¢—É—Ä—Ü–∏—è", "–ß–∞–º—å—é–≤–∞"]

load_dotenv()  # —á–∏—Ç–∞–µ—Ç .env —Ä—è–¥–æ–º

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 5524768195 –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
user_session_name = 'user_5524768195'
client = TelegramClient(user_session_name, api_id, api_hash)

# –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ username –∏–ª–∏ ID
TARGET = "@leadder_bot"  # –ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π

def anonymize(text: str) -> str:
    # Drop initial group header if there's a blank line separator (first paragraph)
    if '\n\n' in text:
        text = text.split('\n\n', 1)[1]
    # Now normalize by lines to remove leftover header-like fragments and "–í–æ–∑–º–æ–∂–Ω—ã–π —Ä–µ–≥–∏–æ–Ω"
    lines = text.splitlines()
    filtered_lines = []
    for line in lines:
        orig = line
        line = line.strip()
        if not line:
            continue
        # remove title/group header lines: containing '–ß–∞—Ç' or having pipe separators (e.g. "–¢—É—Ä—Ü–∏—è | –ñ–∏–ª—å–µ | –ê–ª–∞–Ω—å—è")
        if re.search(r"\b–ß–∞—Ç\b", line, flags=re.IGNORECASE) or ('|' in line and len(line.split('|')) >= 2):
            continue
        # skip lines that look like ALL CAPS navigation or ambiguous short titles with location names only
        if re.fullmatch(r'[\w\s,\-\\/‚ù§Ô∏èüáπüá∑]+', line) and line == line.upper() and len(line) < 100:
            continue
        # drop any line that mentions "–í–æ–∑–º–æ–∂–Ω—ã–π —Ä–µ–≥–∏–æ–Ω" (and do not include following hashtags)
        if re.search(r'–≤–æ–∑–º–æ–∂–Ω—ã–π\s+—Ä–µ–≥–∏–æ–Ω', line, flags=re.IGNORECASE):
            continue
        filtered_lines.append(orig)
    text = "\n".join(filtered_lines)
    # Remove leading standalone canonical location followed by punctuation (e.g. "–°—Ç–∞–º–±—É–ª.")
    text = re.sub(rf"^({'|'.join([re.escape(loc) for loc in CANONICAL_LOCATIONS])})[\.:]\s*", "", text, flags=re.IGNORECASE)
    # —É–¥–∞–ª–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏ (#—Å–ª–æ–≤–æ -> —Å–ª–æ–≤–æ)
    text = re.sub(r"#", "", text)
    # —É–¥–∞–ª–∏—Ç—å username, —Å—Å—ã–ª–∫–∏ –∏ –Ω–æ–º–µ—Ä–∞
    text = re.sub(r'@\w+', '<user>', text)
    text = re.sub(r'https?://\S+', '<link>', text)
    text = re.sub(r'\+?\d[\d \-\(\)]{5,}\d', '<phone>', text)
    # —Å–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r"\s+", " ", text).strip()
    # —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ category-like —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–Ω—Ü–µ
    text = re.sub(r"\b\w+_\w+\b$", "", text).strip()
    return text

async def dump():
    await client.start()
    me = await client.get_me()
    print(f"Logged in as user: {me.id} ({me.username or me.first_name})")
    entity = await client.get_entity(TARGET)
    output_path = "competitor_leads1.jsonl"
    with open(output_path, "w", encoding="utf-8") as f:
        async for message in client.iter_messages(entity, limit=None):
            text = message.message or ""
            cleaned = anonymize(text)
            if not cleaned:
                continue
            item = {
                "text": cleaned,
                "timestamp": message.date.isoformat(),
            }
            f.write(json.dumps(item, ensure_ascii=False) + "\n")
    print(f"Saved to {output_path}")

if __name__ == "__main__":
    asyncio.run(dump())